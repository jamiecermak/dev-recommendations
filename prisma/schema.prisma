// Prisma Schema Docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String       @id @default(cuid())
    clerkId      String       @map("clerk_id")
    firstName    String       @map("first_name")
    lastName     String       @map("last_name")
    emailAddress String       @map("email_address")
    isActive     Boolean      @map("is_active")
    createdAt    DateTime     @default(now()) @map("created_at")
    updatedAt    DateTime     @updatedAt @map("updated_at")
    teamMembers  TeamMember[]
    createdTeams Team[]       @relation("CreatedTeams")
    ownedTeams   Team[]       @relation("OwnedTeams")
    InviteCodes  InviteCode[]
    createdPosts Post[]       @relation("CreatedPosts")
    updatedPosts Post[]       @relation("UpdatedPosts")

    @@unique(clerkId)
    @@map("users")
}

model Team {
    id              String       @id @default(cuid())
    name            String
    description     String       @default("")
    createdByUserId String       @map("created_by_user_id")
    ownedByUserId   String       @map("owned_by_user_id")
    createdAt       DateTime     @default(now()) @map("created_at")
    updatedAt       DateTime     @updatedAt @map("updated_at")
    teamMembers     TeamMember[]

    createdByUser User         @relation("CreatedTeams", fields: [createdByUserId], references: [id])
    ownedByUser   User         @relation("OwnedTeams", fields: [ownedByUserId], references: [id])
    inviteCodes   InviteCode[]
    posts         Post[]

    @@map("teams")
}

model TeamMember {
    teamId    String   @map("team_id")
    userId    String   @map("user_id")
    isAdmin   Boolean  @default(false) @map("is_admin")
    isActive  Boolean  @default(true) @map("is_active")
    joinedAt  DateTime @default(now()) @map("joined_at")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    team Team @relation(fields: [teamId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@id([teamId, userId])
    @@map("team_members")
}

model InviteCode {
    id              String    @id @default(cuid())
    token           String
    invitedByUserId String    @map("invited_by_user_id")
    emailAddress    String?   @map("email_address")
    teamId          String    @map("team_id")
    isUsed          Boolean   @default(false) @map("is_used")
    usedAt          DateTime? @map("used_at")
    createdAt       DateTime  @default(now()) @map("created_at")
    updatedAt       DateTime  @updatedAt @map("updated_at")
    expiresAt       DateTime  @map("expires_at")

    invitedByUser User @relation(fields: [invitedByUserId], references: [id])
    team          Team @relation(fields: [teamId], references: [id])

    @@unique(token)
    @@map("invite_codes")
}

model Post {
    id              String   @id @default(cuid())
    teamId          String   @map("team_id")
    title           String   @map("title")
    description     String   @map("description")
    href            String   @map("href")
    postTypeId      String   @map("post_type_id")
    createdByUserId String   @map("created_by_user_id")
    updatedByUserId String   @map("updated_by_user_id")
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")

    team          Team      @relation(fields: [teamId], references: [id])
    createdByUser User      @relation("CreatedPosts", fields: [createdByUserId], references: [id])
    updatedByUser User      @relation("UpdatedPosts", fields: [updatedByUserId], references: [id])
    postType      PostType  @relation(fields: [postTypeId], references: [id])
    postTags      PostTag[]

    @@map("posts")
}

model PostType {
    id    String @id @default(cuid())
    name  String @map("name")
    posts Post[]

    @@map("post_types")
}

model PostTag {
    postId String @map("post_id")
    tagId  String @map("tag_id")

    post Post @relation(fields: [postId], references: [id])
    tag  Tag  @relation(fields: [tagId], references: [id])

    @@id([postId, tagId])
    @@map("post_tags")
}

model Tag {
    id       String    @id @default(cuid())
    name     String    @map("name")
    postTags PostTag[]

    @@map("tags")
}
